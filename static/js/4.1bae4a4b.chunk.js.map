{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.module.css","containers/Auth/Auth.module.css","containers/Auth/Auth.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_Input_module_css__WEBPACK_IMPORTED_MODULE_1__","_Input_module_css__WEBPACK_IMPORTED_MODULE_1___default","input","props","inputElement","validClass","classes","InputElement","validationError","valid","shouldValidate","touched","push","Invalid","a","createElement","className","ValidationError","valueType","elementType","Object","assign","join","elementConfig","value","onChange","changed","key","options","map","o","displayValue","Input","module","exports","Label","Auth","state","controls","email","type","placeholder","validations","required","password","minLength","isSignup","loginHandler","event","_this","onLogin","preventDefault","switchHandler","setState","prevState","this","burgerBuilder","authRedirectPath","setAuthRedirectPath","controlName","updatedControls","updateObject","D_React_React_burger_builder_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","target","checkValidity","_this2","inp","id","isDisabled","every","i","error","message","authRedirect","isAuth","react__WEBPACK_IMPORTED_MODULE_6___default","react_router_dom__WEBPACK_IMPORTED_MODULE_13__","to","element","onSubmit","_components_UI_Input_Input__WEBPACK_IMPORTED_MODULE_8__","inputChangeHandler","_components_UI_Button_Button__WEBPACK_IMPORTED_MODULE_9__","btnType","disabled","clicked","loading","_components_UI_Spinner_Spinner__WEBPACK_IMPORTED_MODULE_12__","Component","connect","token","auth","userId","ingredients","building","dispatch","isSginup"],"mappings":"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","file":"static/js/4.1bae4a4b.chunk.js","sourcesContent":["import React from 'react';\r\nimport classes from './Input.module.css';\r\n\r\nconst input = (props) => {\r\n    let inputElement = null;\r\n    const validClass = [classes.InputElement];\r\n    let validationError = null;\r\n    if (props.valid && props.shouldValidate && props.touched) {\r\n        validClass.push(classes.Invalid);\r\n        validationError = <p className={classes.ValidationError}>Please enter a valid {props.valueType}</p>;\r\n    }\r\n\r\n    switch (props.elementType) {\r\n        case ('input'):\r\n            inputElement = <input className={validClass.join(' ')} {...props.elementConfig} value={props.value} onChange={props.changed} />;\r\n            break;\r\n        case ('textarea'):\r\n            inputElement = <textarea className={validClass.join(' ')} {...props.elementConfig} value={props.value} onChange={props.changed} />;\r\n            break;\r\n        case ('select'):\r\n            inputElement = (\r\n                <select className={validClass.join(' ')} {...props.elementConfig} onChange={props.changed} value={props.value}>\r\n                    <option value=\"\" key='default' >Select Method</option>\r\n                    {\r\n                        props.elementConfig.options.map(o => {\r\n                            return <option value={o.value} key={o.value} >{o.displayValue}</option>\r\n                        })\r\n\r\n                    }\r\n                </select>\r\n            );\r\n            break;\r\n        default:\r\n            inputElement = <input className={validClass.join(' ')} {...props.elementConfig} value={props.value} />;\r\n            return inputElement;\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={classes.Input}>\r\n            {/* <label className={classes.Label}>{props.label}: </label> */}\r\n            {inputElement}\r\n            {validationError}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__2brp_\",\"Label\":\"Input_Label__19ghY\",\"InputElement\":\"Input_InputElement__2psjG\",\"Invalid\":\"Input_Invalid__1mFC_\",\"ValidationError\":\"Input_ValidationError__20Te8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__2x5ka\"};","import React, { Component } from 'react';\r\nimport classes from './Auth.module.css';\r\nimport Input from '../../components/UI/Input/Input';\r\nimport Button from '../../components/UI/Button/Button';\r\nimport { connect } from 'react-redux';\r\nimport { auth } from '../../store/actions/auth';\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { setAuthRedirectPath } from '../../store/actions/auth';\r\nimport { updateObject, checkValidity } from '../../shared/utility';\r\n\r\nclass Auth extends Component {\r\n    state = {\r\n        controls: {\r\n            email: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'email',\r\n                    placeholder: 'Email'\r\n                },\r\n                value: '',\r\n                validations: {\r\n                    required: true,\r\n                    email: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            password: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'password',\r\n                    placeholder: 'Password'\r\n                },\r\n                value: '',\r\n                validations: {\r\n                    required: true,\r\n                    minLength: 6\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            }\r\n        },\r\n        isSignup: false\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (!this.props.burgerBuilder && this.props.authRedirectPath !== '/checkout') {\r\n            this.props.setAuthRedirectPath();\r\n        }\r\n    }\r\n\r\n\r\n    inputChangeHandler(event, controlName) {\r\n        const updatedControls = updateObject(this.state.controls,\r\n            {\r\n                [controlName]:\r\n                    updateObject(this.state.controls[controlName], {\r\n                        value: event.target.value,\r\n                        valid: checkValidity(event.target.value, this.state.controls[controlName].validations),\r\n                        touched: true\r\n                    })\r\n            })\r\n        this.setState({\r\n            controls: updatedControls\r\n        })\r\n    }\r\n\r\n    loginHandler = (event) => {\r\n        this.props.onLogin(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignup);\r\n        event.preventDefault();\r\n    }\r\n\r\n    switchHandler = () => {\r\n        this.setState(prevState => {\r\n            return { isSignup: !prevState.isSignup }\r\n        })\r\n    }\r\n\r\n    render() {\r\n        let inputElement = [];\r\n        for (let inp in this.state.controls) {\r\n            inputElement.push(\r\n                {\r\n                    id: inp,\r\n                    elementType: this.state.controls[inp].elementType,\r\n                    elementConfig: this.state.controls[inp].elementConfig,\r\n                    value: this.state.controls[inp].value,\r\n                    valid: this.state.controls[inp].valid,\r\n                    shouldValidate: this.state.controls[inp].validations,\r\n                    touched: this.state.controls[inp].touched\r\n                }\r\n            )\r\n        }\r\n        let isDisabled = inputElement.every(i => i.valid);\r\n        let error = null;\r\n        if (this.props.error) {\r\n            error = this.props.error.message;\r\n        }\r\n\r\n        let authRedirect = null;\r\n        if (this.props.isAuth) {\r\n            authRedirect = <Redirect to={this.props.authRedirectPath} />\r\n        }\r\n        let element = (\r\n            <div className={classes.Auth}>\r\n                {error}\r\n                {authRedirect}\r\n                <form onSubmit={this.loginHandler}>\r\n                    {\r\n                        inputElement.map(inp => {\r\n                            return <Input\r\n                                elementType={inp.elementType}\r\n                                value={inp.value}\r\n                                elementConfig={inp.elementConfig}\r\n                                key={inp.id}\r\n                                changed={(event) => { this.inputChangeHandler(event, inp.id) }}\r\n                                valid={!inp.valid}\r\n                                shouldValidate={inp.shouldValidate}\r\n                                touched={inp.touched}\r\n                                valueType={inp.id}\r\n                            />\r\n                        })\r\n                    }\r\n\r\n                    <Button btnType='Success' disabled={!isDisabled}>{!this.state.isSignup ? 'LOGIN' : 'Sign UP'}</Button>\r\n                </form>\r\n                <Button btnType='Danger' clicked={this.switchHandler}>SWITCH TO {this.state.isSignup ? 'Login' : 'Sign UP'}</Button>\r\n            </div>\r\n        )\r\n        if (this.props.loading) {\r\n            element = <Spinner />;\r\n        }\r\n        return element\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        token: state.auth.token,\r\n        userId: state.auth.userId,\r\n        loading: state.auth.loading,\r\n        error: state.auth.error,\r\n        isAuth: state.auth.token !== null,\r\n        authRedirectPath: state.auth.authRedirectPath,\r\n        burgerBuilder: state.ingredients.building\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onLogin: (email, password, isSginup) => dispatch(auth(email, password, isSginup)),\r\n        setAuthRedirectPath: () => dispatch(setAuthRedirectPath('/'))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);"],"sourceRoot":""}