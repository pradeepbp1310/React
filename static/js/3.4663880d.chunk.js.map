{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.module.css","components/Order/CheckoutSummary/CheckoutSummary.module.css","containers/Checkout/ContactData/ContactData.module.css","components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_Input_module_css__WEBPACK_IMPORTED_MODULE_1__","_Input_module_css__WEBPACK_IMPORTED_MODULE_1___default","input","props","inputElement","validClass","classes","InputElement","validationError","valid","shouldValidate","touched","push","Invalid","a","createElement","className","ValidationError","valueType","elementType","Object","assign","join","elementConfig","value","onChange","changed","key","options","map","o","displayValue","Input","module","exports","Label","CheckoutSummary","ContactData","checkoutSummary","react_default","style","textAlign","width","Burger","ingredients","Button","btnType","clicked","cancelCheckout","continueCheckout","state","orderForm","name","type","placeholder","validations","required","address","street","zipCode","city","email","minLength","maxLength","deliveryMethod","orderHandler","event","preventDefault","formData","formEle","_this","data","price","orders","userId","onBurgerPurchase","token","inputIdentifier","updatedElem","updateObject","this","target","checkValidity","updatedForm","defineProperty","setState","_this2","elem","loading","Spinner","inp","id","isDisabled","every","i","Fragment","onSubmit","inputChangeHandler","disabled","Component","connect","order","auth","dispatch","burgerPurchase","withErrorHandler","axios","Checkout","cancelCheckoutHandler","history","goBack","continueCheckoutHandler","summary","react_router","to","purchased","replace","path","match","component"],"mappings":"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","file":"static/js/3.4663880d.chunk.js","sourcesContent":["import React from 'react';\r\nimport classes from './Input.module.css';\r\n\r\nconst input = (props) => {\r\n    let inputElement = null;\r\n    const validClass = [classes.InputElement];\r\n    let validationError = null;\r\n    if (props.valid && props.shouldValidate && props.touched) {\r\n        validClass.push(classes.Invalid);\r\n        validationError = <p className={classes.ValidationError}>Please enter a valid {props.valueType}</p>;\r\n    }\r\n\r\n    switch (props.elementType) {\r\n        case ('input'):\r\n            inputElement = <input className={validClass.join(' ')} {...props.elementConfig} value={props.value} onChange={props.changed} />;\r\n            break;\r\n        case ('textarea'):\r\n            inputElement = <textarea className={validClass.join(' ')} {...props.elementConfig} value={props.value} onChange={props.changed} />;\r\n            break;\r\n        case ('select'):\r\n            inputElement = (\r\n                <select className={validClass.join(' ')} {...props.elementConfig} onChange={props.changed} value={props.value}>\r\n                    <option value=\"\" key='default' >Select Method</option>\r\n                    {\r\n                        props.elementConfig.options.map(o => {\r\n                            return <option value={o.value} key={o.value} >{o.displayValue}</option>\r\n                        })\r\n\r\n                    }\r\n                </select>\r\n            );\r\n            break;\r\n        default:\r\n            inputElement = <input className={validClass.join(' ')} {...props.elementConfig} value={props.value} />;\r\n            return inputElement;\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={classes.Input}>\r\n            {/* <label className={classes.Label}>{props.label}: </label> */}\r\n            {inputElement}\r\n            {validationError}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__2brp_\",\"Label\":\"Input_Label__19ghY\",\"InputElement\":\"Input_InputElement__2psjG\",\"Invalid\":\"Input_Invalid__1mFC_\",\"ValidationError\":\"Input_ValidationError__20Te8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__2-vHz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__3G5S8\"};","import React from 'react';\r\nimport classes from './CheckoutSummary.module.css';\r\nimport Burger from '../../Burger/Burger';\r\nimport Button from '../../UI/Button/Button';\r\n\r\n\r\nconst checkoutSummary = (props) => {\r\n    return (\r\n        <div className={classes.CheckoutSummary}>\r\n            <div style={{ textAlign: 'center', width: '100%' }}>\r\n                <Burger ingredients={props.ingredients} />\r\n            </div>\r\n            <Button btnType='Danger' clicked={props.cancelCheckout}>Cancel</Button>\r\n            <Button btnType='Success' clicked={props.continueCheckout}>Continue</Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default checkoutSummary;","import React, { Component } from 'react';\r\nimport Button from '../../../components/UI/Button/Button';\r\nimport axios from '../../../axios-orders';\r\nimport Spinner from '../../../components/UI/Spinner/Spinner';\r\nimport Input from '../../../components/UI/Input/Input';\r\nimport classes from './ContactData.module.css';\r\nimport { connect } from 'react-redux';\r\nimport { burgerPurchase } from '../../../store/actions/order';\r\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\r\nimport { updateObject, checkValidity } from '../../../shared/utility';\r\n\r\nclass ContactData extends Component {\r\n\r\n    state = {\r\n        orderForm: {\r\n            name: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'input',\r\n                    placeholder: 'Name'\r\n                },\r\n                value: '',\r\n                validations: {\r\n                    required: true,\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            address: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'input',\r\n                    placeholder: 'Address'\r\n                },\r\n                value: '',\r\n                validations: {\r\n                    required: true,\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            street: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'input',\r\n                    placeholder: 'Street'\r\n                },\r\n                value: '',\r\n                validations: {\r\n                    required: true,\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            zipCode: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'input',\r\n                    placeholder: 'Zip'\r\n                },\r\n                value: '',\r\n                validations: {\r\n                    required: true,\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            city: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'input',\r\n                    placeholder: 'City'\r\n                },\r\n                value: '',\r\n                validations: {\r\n                    required: true,\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            email: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'input',\r\n                    placeholder: 'Email'\r\n                },\r\n                value: '',\r\n                validations: {\r\n                    required: true,\r\n                    minLength: 3,\r\n                    maxLength: 6\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            deliveryMethod: {\r\n                elementType: 'select',\r\n                elementConfig: {\r\n                    type: 'select',\r\n                    placeholder: 'Delivery Method',\r\n                    options: [\r\n                        { value: 'fastest', displayValue: 'Fastest' },\r\n                        { value: 'cheapest', displayValue: 'Cheapest' }\r\n                    ]\r\n\r\n                },\r\n                value: '',\r\n                validations: {\r\n                    required: true,\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n        }\r\n    }\r\n\r\n    orderHandler = (event) => {\r\n        event.preventDefault();\r\n        const formData = {};\r\n        for (let formEle in this.state.orderForm) {\r\n            formData[formEle] = this.state.orderForm[formEle].value;\r\n        }\r\n\r\n        const data = {\r\n            ingredients: this.props.ingredients,\r\n            price: this.props.price,\r\n            orders: formData,\r\n            userId: this.props.userId\r\n        }\r\n        this.props.onBurgerPurchase(data, this.props.token);\r\n    }\r\n\r\n    inputChangeHandler(event, inputIdentifier) {\r\n\r\n        const updatedElem = updateObject(this.state.orderForm[inputIdentifier], {\r\n            value: event.target.value,\r\n            valid: checkValidity(event.target.value, this.state.orderForm[inputIdentifier].validations),\r\n            touched: true\r\n        })\r\n        const updatedForm = updateObject(this.state.orderForm, {\r\n            [inputIdentifier]: updatedElem\r\n        })\r\n\r\n        this.setState({\r\n            orderForm: updatedForm\r\n        })\r\n    }\r\n\r\n    render() {\r\n        let elem = null;\r\n        if (this.props.loading) {\r\n            elem = <Spinner />\r\n        } else {\r\n            let inputElement = [];\r\n            for (let inp in this.state.orderForm) {\r\n                inputElement.push(\r\n                    {\r\n                        id: inp,\r\n                        elementType: this.state.orderForm[inp].elementType,\r\n                        elementConfig: this.state.orderForm[inp].elementConfig,\r\n                        value: this.state.orderForm[inp].value,\r\n                        valid: this.state.orderForm[inp].valid,\r\n                        shouldValidate: this.state.orderForm[inp].validations,\r\n                        touched: this.state.orderForm[inp].touched\r\n                    }\r\n                )\r\n            }\r\n            let isDisabled = inputElement.every(i => i.valid);\r\n            elem = (\r\n                <React.Fragment>\r\n                    <form className={classes.ContactData} onSubmit={this.orderHandler}>\r\n                        {\r\n                            inputElement.map(inp => {\r\n                                return <Input\r\n                                    elementType={inp.elementType}\r\n                                    value={inp.value}\r\n                                    elementConfig={inp.elementConfig}\r\n                                    key={inp.id}\r\n                                    changed={(event) => { this.inputChangeHandler(event, inp.id) }}\r\n                                    valid={!inp.valid}\r\n                                    shouldValidate={inp.shouldValidate}\r\n                                    touched={inp.touched}\r\n                                    valueType={inp.id}\r\n                                />\r\n                            })\r\n                        }\r\n\r\n                        <Button btnType='Success' disabled={!isDisabled}>ORDER</Button>\r\n                    </form>\r\n                </React.Fragment>\r\n            )\r\n        }\r\n        return elem;\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ingredients: state.ingredients.ingredients,\r\n        price: state.ingredients.price,\r\n        loading: state.order.loading,\r\n        order: state.order.orders,\r\n        token: state.auth.token,\r\n        userId: state.auth.userId\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onBurgerPurchase: (data, token) => dispatch(burgerPurchase(data, token))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios));","import React, { Component } from 'react';\r\nimport CheckoutSummary from '../../components/Order/CheckoutSummary/CheckoutSummary';\r\nimport ContactData from './ContactData/ContactData';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\nclass Checkout extends Component {\r\n\r\n    cancelCheckoutHandler = () => {\r\n        this.props.history.goBack()\r\n    }\r\n\r\n    continueCheckoutHandler = () => {\r\n        this.props.history.push('/checkout/contact-data');\r\n    }\r\n\r\n    render() {\r\n        let summary = (<Redirect to='/' />);\r\n\r\n        if (this.props.ingredients) {\r\n            if (this.props.purchased) {\r\n                this.props.history.replace('/');\r\n            }\r\n            summary = (\r\n                <div>\r\n                    <CheckoutSummary\r\n                        ingredients={this.props.ingredients}\r\n                        cancelCheckout={this.cancelCheckoutHandler}\r\n                        continueCheckout={this.continueCheckoutHandler}\r\n                    />\r\n                    <Route\r\n                        path={this.props.match.path + '/contact-data'}\r\n                        component={ContactData}\r\n                    />\r\n                </div>)\r\n        }\r\n        return summary;\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ingredients: state.ingredients.ingredients,\r\n        purchased: state.order.purchased\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Checkout);"],"sourceRoot":""}