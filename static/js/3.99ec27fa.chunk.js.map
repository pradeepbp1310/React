{"version":3,"sources":["components/UI/Input/Input.module.css","components/Order/CheckoutSummary/CheckoutSummary.module.css","containers/Checkout/ContactData/ContactData.module.css","components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js","components/UI/Input/Input.js"],"names":["module","exports","Input","Label","InputElement","Invalid","ValidationError","CheckoutSummary","ContactData","checkoutSummary","props","react_default","a","createElement","className","classes","style","textAlign","width","Burger","ingredients","Button","btnType","clicked","cancelCheckout","continueCheckout","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validations","required","valid","touched","address","street","zipCode","city","email","minLength","maxLength","deliveryMethod","options","displayValue","orderHandler","event","preventDefault","formData","formEle","_this","data","price","orders","userId","onBurgerPurchase","token","inputIdentifier","updatedElem","updateObject","this","target","checkValidity","updatedForm","Object","defineProperty","setState","_this2","elem","loading","Spinner","inputElement","inp","push","id","shouldValidate","isDisabled","every","i","Fragment","onSubmit","map","key","changed","inputChangeHandler","valueType","disabled","Component","connect","order","auth","dispatch","burgerPurchase","withErrorHandler","axios","Checkout","cancelCheckoutHandler","history","goBack","continueCheckoutHandler","summary","react_router","to","purchased","replace","path","match","component","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_Input_module_css__WEBPACK_IMPORTED_MODULE_1__","_Input_module_css__WEBPACK_IMPORTED_MODULE_1___default","input","validClass","validationError","assign","join","onChange","o"],"mappings":"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","file":"static/js/3.99ec27fa.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__2brp_\",\"Label\":\"Input_Label__19ghY\",\"InputElement\":\"Input_InputElement__2psjG\",\"Invalid\":\"Input_Invalid__1mFC_\",\"ValidationError\":\"Input_ValidationError__20Te8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__2-vHz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__3G5S8\"};","import React from 'react';\r\nimport classes from './CheckoutSummary.module.css';\r\nimport Burger from '../../Burger/Burger';\r\nimport Button from '../../UI/Button/Button';\r\n\r\n\r\nconst checkoutSummary = (props) => {\r\n    return (\r\n        <div className={classes.CheckoutSummary}>\r\n            <div style={{ textAlign: 'center', width: '100%' }}>\r\n                <Burger ingredients={props.ingredients} />\r\n            </div>\r\n            <Button btnType='Danger' clicked={props.cancelCheckout}>Cancel</Button>\r\n            <Button btnType='Success' clicked={props.continueCheckout}>Continue</Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default checkoutSummary;","import React, { Component } from 'react';\r\nimport Button from '../../../components/UI/Button/Button';\r\nimport axios from '../../../axios-orders';\r\nimport Spinner from '../../../components/UI/Spinner/Spinner';\r\nimport Input from '../../../components/UI/Input/Input';\r\nimport classes from './ContactData.module.css';\r\nimport { connect } from 'react-redux';\r\nimport { burgerPurchase } from '../../../store/actions/order';\r\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\r\nimport { updateObject, checkValidity } from '../../../shared/utility';\r\n\r\nclass ContactData extends Component {\r\n\r\n    state = {\r\n        orderForm: {\r\n            name: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'input',\r\n                    placeholder: 'Name'\r\n                },\r\n                value: '',\r\n                validations: {\r\n                    required: true,\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            address: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'input',\r\n                    placeholder: 'Address'\r\n                },\r\n                value: '',\r\n                validations: {\r\n                    required: true,\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            street: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'input',\r\n                    placeholder: 'Street'\r\n                },\r\n                value: '',\r\n                validations: {\r\n                    required: true,\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            zipCode: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'input',\r\n                    placeholder: 'Zip'\r\n                },\r\n                value: '',\r\n                validations: {\r\n                    required: true,\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            city: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'input',\r\n                    placeholder: 'City'\r\n                },\r\n                value: '',\r\n                validations: {\r\n                    required: true,\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            email: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'input',\r\n                    placeholder: 'Email'\r\n                },\r\n                value: '',\r\n                validations: {\r\n                    required: true,\r\n                    minLength: 3,\r\n                    maxLength: 6\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            deliveryMethod: {\r\n                elementType: 'select',\r\n                elementConfig: {\r\n                    type: 'select',\r\n                    placeholder: 'Delivery Method',\r\n                    options: [\r\n                        { value: 'fastest', displayValue: 'Fastest' },\r\n                        { value: 'cheapest', displayValue: 'Cheapest' }\r\n                    ]\r\n\r\n                },\r\n                value: '',\r\n                validations: {\r\n                    required: true,\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n        }\r\n    }\r\n\r\n    orderHandler = (event) => {\r\n        event.preventDefault();\r\n        const formData = {};\r\n        for (let formEle in this.state.orderForm) {\r\n            formData[formEle] = this.state.orderForm[formEle].value;\r\n        }\r\n\r\n        const data = {\r\n            ingredients: this.props.ingredients,\r\n            price: this.props.price,\r\n            orders: formData,\r\n            userId: this.props.userId\r\n        }\r\n        this.props.onBurgerPurchase(data, this.props.token);\r\n    }\r\n\r\n    inputChangeHandler(event, inputIdentifier) {\r\n\r\n        const updatedElem = updateObject(this.state.orderForm[inputIdentifier], {\r\n            value: event.target.value,\r\n            valid: checkValidity(event.target.value, this.state.orderForm[inputIdentifier].validations),\r\n            touched: true\r\n        })\r\n        const updatedForm = updateObject(this.state.orderForm, {\r\n            [inputIdentifier]: updatedElem\r\n        })\r\n\r\n        this.setState({\r\n            orderForm: updatedForm\r\n        })\r\n    }\r\n\r\n    render() {\r\n        let elem = null;\r\n        if (this.props.loading) {\r\n            elem = <Spinner />\r\n        } else {\r\n            let inputElement = [];\r\n            for (let inp in this.state.orderForm) {\r\n                inputElement.push(\r\n                    {\r\n                        id: inp,\r\n                        elementType: this.state.orderForm[inp].elementType,\r\n                        elementConfig: this.state.orderForm[inp].elementConfig,\r\n                        value: this.state.orderForm[inp].value,\r\n                        valid: this.state.orderForm[inp].valid,\r\n                        shouldValidate: this.state.orderForm[inp].validations,\r\n                        touched: this.state.orderForm[inp].touched\r\n                    }\r\n                )\r\n            }\r\n            let isDisabled = inputElement.every(i => i.valid);\r\n            elem = (\r\n                <React.Fragment>\r\n                    <form className={classes.ContactData} onSubmit={this.orderHandler}>\r\n                        {\r\n                            inputElement.map(inp => {\r\n                                return <Input\r\n                                    elementType={inp.elementType}\r\n                                    value={inp.value}\r\n                                    elementConfig={inp.elementConfig}\r\n                                    key={inp.id}\r\n                                    changed={(event) => { this.inputChangeHandler(event, inp.id) }}\r\n                                    valid={!inp.valid}\r\n                                    shouldValidate={inp.shouldValidate}\r\n                                    touched={inp.touched}\r\n                                    valueType={inp.id}\r\n                                />\r\n                            })\r\n                        }\r\n\r\n                        <Button btnType='Success' disabled={!isDisabled}>ORDER</Button>\r\n                    </form>\r\n                </React.Fragment>\r\n            )\r\n        }\r\n        return elem;\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ingredients: state.ingredients.ingredients,\r\n        price: state.ingredients.price,\r\n        loading: state.order.loading,\r\n        order: state.order.orders,\r\n        token: state.auth.token,\r\n        userId: state.auth.userId\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onBurgerPurchase: (data, token) => dispatch(burgerPurchase(data, token))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios));","import React, { Component } from 'react';\r\nimport CheckoutSummary from '../../components/Order/CheckoutSummary/CheckoutSummary';\r\nimport ContactData from './ContactData/ContactData';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\nclass Checkout extends Component {\r\n\r\n    cancelCheckoutHandler = () => {\r\n        this.props.history.goBack()\r\n    }\r\n\r\n    continueCheckoutHandler = () => {\r\n        this.props.history.push('/checkout/contact-data');\r\n    }\r\n\r\n    render() {\r\n        let summary = (<Redirect to='/' />);\r\n\r\n        if (this.props.ingredients) {\r\n            if (this.props.purchased) {\r\n                this.props.history.replace('/');\r\n            }\r\n            summary = (\r\n                <div>\r\n                    <CheckoutSummary\r\n                        ingredients={this.props.ingredients}\r\n                        cancelCheckout={this.cancelCheckoutHandler}\r\n                        continueCheckout={this.continueCheckoutHandler}\r\n                    />\r\n                    <Route\r\n                        path={this.props.match.path + '/contact-data'}\r\n                        component={ContactData}\r\n                    />\r\n                </div>)\r\n        }\r\n        return summary;\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ingredients: state.ingredients.ingredients,\r\n        purchased: state.order.purchased\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Checkout);","import React from 'react';\r\nimport classes from './Input.module.css';\r\n\r\nconst input = (props) => {\r\n    let inputElement = null;\r\n    const validClass = [classes.InputElement];\r\n    let validationError = null;\r\n    if (props.valid && props.shouldValidate && props.touched) {\r\n        validClass.push(classes.Invalid);\r\n        validationError = <p className={classes.ValidationError}>Please enter a valid {props.valueType}</p>;\r\n    }\r\n\r\n    switch (props.elementType) {\r\n        case ('input'):\r\n            inputElement = <input className={validClass.join(' ')} {...props.elementConfig} value={props.value} onChange={props.changed} />;\r\n            break;\r\n        case ('textarea'):\r\n            inputElement = <textarea className={validClass.join(' ')} {...props.elementConfig} value={props.value} onChange={props.changed} />;\r\n            break;\r\n        case ('select'):\r\n            inputElement = (\r\n                <select className={validClass.join(' ')} {...props.elementConfig} onChange={props.changed} value={props.value}>\r\n                    <option value=\"\" key='default' >Select Method</option>\r\n                    {\r\n                        props.elementConfig.options.map(o => {\r\n                            return <option value={o.value} key={o.value} >{o.displayValue}</option>\r\n                        })\r\n\r\n                    }\r\n                </select>\r\n            );\r\n            break;\r\n        default:\r\n            inputElement = <input className={validClass.join(' ')} {...props.elementConfig} value={props.value} />;\r\n            return inputElement;\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={classes.Input}>\r\n            {/* <label className={classes.Label}>{props.label}: </label> */}\r\n            {inputElement}\r\n            {validationError}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default input;"],"sourceRoot":""}